import { createBdd } from "playwright-bdd";
import { ToolbarTable } from "../../helpers/ToolbarTable";
import { SearchPage } from "../../helpers/SearchPage";
import { expect } from "@playwright/test";
import { test } from "../../fixtures";

export const { Given, When, Then } = createBdd(test);

const SBOM_TABLE_NAME = "Sbom table";
const ADVISORY_TABLE_NAME = "Advisory table";

Given(
  "User visits Vulnerability details Page of {string}",
  async ({ page }, vulnerabilityID) => {
    const searchPage = new SearchPage(page, "Vulnerabilities");
    await searchPage.dedicatedSearch(vulnerabilityID);
    await page.getByRole("link", { name: vulnerabilityID }).click();
  },
);

// Vulnerability Search
When(
  "User searches for {string} in the general search bar",
  async ({ page }, item) => {
    const searchPage = new SearchPage(page, "Dashboard");
    await searchPage.generalSearch("Vulnerabilities", item);
  },
);

When(
  "User searches for {string} in the dedicated search bar",
  async ({ page }, vulnerabilityID) => {
    const searchPage = new SearchPage(page, "Vulnerabilities");
    await searchPage.dedicatedSearch(vulnerabilityID);
  },
);

Then(
  "The vulnerability {string} shows in the results",
  async ({ page }, vulnerabilityID) => {
    await expect(
      page.getByRole("gridcell").filter({ hasText: vulnerabilityID }),
    ).toBeVisible();
  },
);

// Vulnerability Explorer
Then(
  "The severity is {string} and the CVSS score is {string}",
  async ({ page }, severityDescription, severityScore) => {
    let severity: string | null = null;
    if (severityDescription === "Unknown") {
      severity = `${severityDescription}`;
    } else {
      severity = `${severityDescription}(${severityScore})`;
    }
    await expect(page.getByText(severity).first()).toBeVisible();
  },
);

Then(
  "The description begins with {string}",
  async ({ page }, descriptionBeginsWith) => {
    await expect(
      page.getByRole("paragraph").filter({ hasText: descriptionBeginsWith }),
    ).toBeVisible();
  },
);

Then(
  "The Reserved date is {string}, the Published date is {string} and Last modified date is {string}",
  async ({ page }, dateReserved, datePublished, dateLastModified) => {
    let reserved = `xpath=//dt[.="Reserved"]/following-sibling::dd[contains(.,"${dateReserved}")]`;
    let published = `xpath=//dt[.="Published"]/following-sibling::dd[contains(.,"${datePublished}")]`;
    let modified = `xpath=//dt[.="Modified"]/following-sibling::dd[contains(.,"${dateLastModified}")]`;
    await expect(page.locator(reserved)).toBeVisible();
    await expect(page.locator(published)).toBeVisible();
    await expect(page.locator(modified)).toBeVisible();
  },
);

// SBOMS

Then("The SBOMs table is sorted by {string}", async ({ page }, columnName) => {
  const toolbarTable = new ToolbarTable(page, SBOM_TABLE_NAME);
  await toolbarTable.verifyTableIsSortedBy(columnName);
});

Then(
  "The SBOMs table total results is {int}",
  async ({ page }, totalResults) => {
    const toolbarTable = new ToolbarTable(page, SBOM_TABLE_NAME);
    await toolbarTable.verifyPaginationHasTotalResults(totalResults);
  },
);

Then(
  "The SBOMs table total results is greather than {int}",
  async ({ page }, totalResults) => {
    const toolbarTable = new ToolbarTable(page, SBOM_TABLE_NAME);
    await toolbarTable.verifyPaginationHasTotalResultsGreatherThan(
      totalResults,
    );
  },
);

Then(
  "The {string} column of the SBOM table contains {string}",
  async ({ page }, columnName, expectedValue) => {
    const toolbarTable = new ToolbarTable(page, SBOM_TABLE_NAME);
    await toolbarTable.verifyColumnContainsText(columnName, expectedValue);
  },
);

// Advisories
Then(
  "User navigates to the Related Advisories tab on the Vulnerability Overview page",
  async ({ page }) => {
    await page.getByRole("tab", { name: "Advisories" }).click();
  },
);

Then("Pagination of Advisories list works", async ({ page }) => {
  const toolbarTable = new ToolbarTable(page, ADVISORY_TABLE_NAME);
  const advisoryTableTopPagination = `xpath=//div[@id="advisory-table-pagination-top"]`;
  await toolbarTable.verifyPagination(advisoryTableTopPagination);
});

Then(
  "A list of all active Advisories tied to the Vulnerability should display",
  async ({ page }) => {
    const toolbarTable = new ToolbarTable(page, ADVISORY_TABLE_NAME);
    await toolbarTable.verifyPaginationHasTotalResultsGreatherThan(0);
  },
);

Then(
  "The {string} information should be visible for each advisory",
  async ({ page }, columnHeaders: string) => {
    const headers = columnHeaders
      .split(`,`)
      .map((column: String) => column.trim());

    for (const header of headers) {
      const headerElement = page.getByRole("columnheader", { name: header });
      if (await headerElement.count()) {
        await expect(headerElement).toBeVisible();
      } else {
        await expect(page.getByRole("button", { name: header })).toBeVisible();
      }
    }
  },
);

Then(
  "The advisories should be sorted by {string}",
  async ({ page }, columnName) => {
    const toolbarTable = new ToolbarTable(page, ADVISORY_TABLE_NAME);
    await toolbarTable.verifyTableIsSortedBy(columnName);
  },
);

Then("User searches for {string}", async ({ page }, advisoryID) => {
  const searchPage = new ToolbarTable(page, ADVISORY_TABLE_NAME);
  await searchPage.filterByText(advisoryID);
});

Then(
  "User visits Advisory details Page of {string} with type {string}",
  async ({ page }, advisoryID, advisoryType) => {
    const advisory = `xpath=//tr[contains(.,'${advisoryID}') and contains(.,'${advisoryType}')]/td/a`;
    await page.locator(advisory).click();
  },
);
